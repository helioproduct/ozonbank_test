// Code generated by MockGen. DO NOT EDIT.
// Source: comments.go
//
// Generated by this command:
//
//	mockgen -source=comments.go -destination=./comment_storage_mock.go -package=service myreddit/internal/service CommentStorage
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	storage "myreddit/internal/adapter/out/storage"
	model "myreddit/internal/model"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCommentStorage is a mock of CommentStorage interface.
type MockCommentStorage struct {
	ctrl     *gomock.Controller
	recorder *MockCommentStorageMockRecorder
	isgomock struct{}
}

// MockCommentStorageMockRecorder is the mock recorder for MockCommentStorage.
type MockCommentStorageMockRecorder struct {
	mock *MockCommentStorage
}

// NewMockCommentStorage creates a new mock instance.
func NewMockCommentStorage(ctrl *gomock.Controller) *MockCommentStorage {
	mock := &MockCommentStorage{ctrl: ctrl}
	mock.recorder = &MockCommentStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentStorage) EXPECT() *MockCommentStorageMockRecorder {
	return m.recorder
}

// CreateComment mocks base method.
func (m *MockCommentStorage) CreateComment(ctx context.Context, req CreateCommentRequest) (model.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", ctx, req)
	ret0, _ := ret[0].(model.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockCommentStorageMockRecorder) CreateComment(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockCommentStorage)(nil).CreateComment), ctx, req)
}

// GetCommentByID mocks base method.
func (m *MockCommentStorage) GetCommentByID(ctx context.Context, commentID int64) (model.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentByID", ctx, commentID)
	ret0, _ := ret[0].(model.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentByID indicates an expected call of GetCommentByID.
func (mr *MockCommentStorageMockRecorder) GetCommentByID(ctx, commentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentByID", reflect.TypeOf((*MockCommentStorage)(nil).GetCommentByID), ctx, commentID)
}

// GetCommentsByPost mocks base method.
func (m *MockCommentStorage) GetCommentsByPost(ctx context.Context, postID int64, limit int) ([]model.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentsByPost", ctx, postID, limit)
	ret0, _ := ret[0].([]model.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentsByPost indicates an expected call of GetCommentsByPost.
func (mr *MockCommentStorageMockRecorder) GetCommentsByPost(ctx, postID, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentsByPost", reflect.TypeOf((*MockCommentStorage)(nil).GetCommentsByPost), ctx, postID, limit)
}

// GetCommentsByPostWithCursor mocks base method.
func (m *MockCommentStorage) GetCommentsByPostWithCursor(ctx context.Context, params storage.GetCommentsParams) ([]model.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentsByPostWithCursor", ctx, params)
	ret0, _ := ret[0].([]model.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentsByPostWithCursor indicates an expected call of GetCommentsByPostWithCursor.
func (mr *MockCommentStorageMockRecorder) GetCommentsByPostWithCursor(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentsByPostWithCursor", reflect.TypeOf((*MockCommentStorage)(nil).GetCommentsByPostWithCursor), ctx, params)
}

// GetReplies mocks base method.
func (m *MockCommentStorage) GetReplies(ctx context.Context, postID, parentID int64, limit int) ([]model.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReplies", ctx, postID, parentID, limit)
	ret0, _ := ret[0].([]model.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReplies indicates an expected call of GetReplies.
func (mr *MockCommentStorageMockRecorder) GetReplies(ctx, postID, parentID, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReplies", reflect.TypeOf((*MockCommentStorage)(nil).GetReplies), ctx, postID, parentID, limit)
}

// GetRepliesWithCursor mocks base method.
func (m *MockCommentStorage) GetRepliesWithCursor(ctx context.Context, params storage.GetRepliesParams) ([]model.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepliesWithCursor", ctx, params)
	ret0, _ := ret[0].([]model.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepliesWithCursor indicates an expected call of GetRepliesWithCursor.
func (mr *MockCommentStorageMockRecorder) GetRepliesWithCursor(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepliesWithCursor", reflect.TypeOf((*MockCommentStorage)(nil).GetRepliesWithCursor), ctx, params)
}

// MockCommentBus is a mock of CommentBus interface.
type MockCommentBus struct {
	ctrl     *gomock.Controller
	recorder *MockCommentBusMockRecorder
	isgomock struct{}
}

// MockCommentBusMockRecorder is the mock recorder for MockCommentBus.
type MockCommentBusMockRecorder struct {
	mock *MockCommentBus
}

// NewMockCommentBus creates a new mock instance.
func NewMockCommentBus(ctrl *gomock.Controller) *MockCommentBus {
	mock := &MockCommentBus{ctrl: ctrl}
	mock.recorder = &MockCommentBusMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentBus) EXPECT() *MockCommentBusMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockCommentBus) Publish(ctx context.Context, postID int64, c model.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, postID, c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockCommentBusMockRecorder) Publish(ctx, postID, c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockCommentBus)(nil).Publish), ctx, postID, c)
}

// Subscribe mocks base method.
func (m *MockCommentBus) Subscribe(ctx context.Context, postID int64) (<-chan model.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", ctx, postID)
	ret0, _ := ret[0].(<-chan model.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockCommentBusMockRecorder) Subscribe(ctx, postID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockCommentBus)(nil).Subscribe), ctx, postID)
}
