// Code generated by MockGen. DO NOT EDIT.
// Source: posts.go
//
// Generated by this command:
//
//	mockgen -source=posts.go -destination=./post_storage_mock.go -package=service myreddit/internal/service PostStorage
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	storage "myreddit/internal/adapter/out/storage"
	model "myreddit/internal/model"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPostStorage is a mock of PostStorage interface.
type MockPostStorage struct {
	ctrl     *gomock.Controller
	recorder *MockPostStorageMockRecorder
	isgomock struct{}
}

// MockPostStorageMockRecorder is the mock recorder for MockPostStorage.
type MockPostStorageMockRecorder struct {
	mock *MockPostStorage
}

// NewMockPostStorage creates a new mock instance.
func NewMockPostStorage(ctrl *gomock.Controller) *MockPostStorage {
	mock := &MockPostStorage{ctrl: ctrl}
	mock.recorder = &MockPostStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostStorage) EXPECT() *MockPostStorageMockRecorder {
	return m.recorder
}

// CreatePost mocks base method.
func (m *MockPostStorage) CreatePost(ctx context.Context, post model.Post) (model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", ctx, post)
	ret0, _ := ret[0].(model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockPostStorageMockRecorder) CreatePost(ctx, post any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockPostStorage)(nil).CreatePost), ctx, post)
}

// GetPostAuthorID mocks base method.
func (m *MockPostStorage) GetPostAuthorID(ctx context.Context, postID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostAuthorID", ctx, postID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostAuthorID indicates an expected call of GetPostAuthorID.
func (mr *MockPostStorageMockRecorder) GetPostAuthorID(ctx, postID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostAuthorID", reflect.TypeOf((*MockPostStorage)(nil).GetPostAuthorID), ctx, postID)
}

// GetPostByID mocks base method.
func (m *MockPostStorage) GetPostByID(ctx context.Context, postID int64) (model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostByID", ctx, postID)
	ret0, _ := ret[0].(model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostByID indicates an expected call of GetPostByID.
func (mr *MockPostStorageMockRecorder) GetPostByID(ctx, postID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostByID", reflect.TypeOf((*MockPostStorage)(nil).GetPostByID), ctx, postID)
}

// GetPosts mocks base method.
func (m *MockPostStorage) GetPosts(ctx context.Context, limit int) ([]model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPosts", ctx, limit)
	ret0, _ := ret[0].([]model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPosts indicates an expected call of GetPosts.
func (mr *MockPostStorageMockRecorder) GetPosts(ctx, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPosts", reflect.TypeOf((*MockPostStorage)(nil).GetPosts), ctx, limit)
}

// GetPostsWithCursor mocks base method.
func (m *MockPostStorage) GetPostsWithCursor(ctx context.Context, params storage.GetPostsParams) ([]model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostsWithCursor", ctx, params)
	ret0, _ := ret[0].([]model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostsWithCursor indicates an expected call of GetPostsWithCursor.
func (mr *MockPostStorageMockRecorder) GetPostsWithCursor(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostsWithCursor", reflect.TypeOf((*MockPostStorage)(nil).GetPostsWithCursor), ctx, params)
}

// SetCommentsEnabled mocks base method.
func (m *MockPostStorage) SetCommentsEnabled(ctx context.Context, postID int64, enabled bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCommentsEnabled", ctx, postID, enabled)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCommentsEnabled indicates an expected call of SetCommentsEnabled.
func (mr *MockPostStorageMockRecorder) SetCommentsEnabled(ctx, postID, enabled any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCommentsEnabled", reflect.TypeOf((*MockPostStorage)(nil).SetCommentsEnabled), ctx, postID, enabled)
}
